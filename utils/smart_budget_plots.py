aW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgc2VhYm9ybiBhcyBzbnMKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YQppbXBvcnQgcGxvdGx5LmdyYXBoX29iamVjdHMgYXMgZ28KZnJvbSBwbG90bHkuc3VicGxvdHMgaW1wb3J0IG1ha2Vfc3VicGxvdHMKaW1wb3J0IHBsb3RseS5leHByZXNzIGFzIHB4Cgpkb2N1bWVudCBjbGFzcyBTbWFydEJ1ZGdldFBsb3RzOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYuY29sb3JzID0gWycjMUY3N0I0JywgJyNGRjc5N0QnLCAnIzJDQTAyQycsICcjRDYyNzI4JywgJyM5NDY3QkQnXQogICAgICAgIHNlbGYuc3R5bGUgPSB7CiAgICAgICAgICAgICdmb250X3NpemUnOiAxMiwKICAgICAgICAgICAgJ2ZpZ3NpemUnOiAoMTIsIDgpLAogICAgICAgICAgICAnZHBpJzogMzAwCiAgICAgICAgfQogICAgCiAgICBkZWYgZ2VuZXJhdGVfcGVyZm9ybWFuY2VfZGF0YShzZWxmKToKICAgICAgICAiIiJHZW5lcmF0ZSBzeW50aGV0aWMgcGVyZm9ybWFuY2UgZGF0YSBmb3IgU21hcnQgQnVkZ2V0IEFJIENZYmVyU2VjIiIiCiAgICAgICAgZGF0ZXMgPSBwZC5kYXRlX3JhbmdlKHN0YXJ0PSIyMDI0LTAxLTAxIiwgZW5kPSIyMDI0LTEyLTMxIiwgZnJlcT0iRCIpCiAgICAgICAgCiAgICAgICAgIyBTaW11bGF0ZSBkZXRlY3Rpb24gcmF0ZXMKICAgICAgICBmcmF1ZF9kZXRlY3Rpb25fcmF0ZSA9IDg1ICsgNSAqIG5wLnNpbihucC5hcmFuZ2UobGVuKGRhdGVzKSkgKiAyICogbnAucGkgLyAzNjUpICsgbnAucmFuZG9tLm5vcm1hbCgwLCAyLCBsZW4oZGF0ZXMpKQogICAgICAgIGZhbHNlX3Bvc2l0aXZlX3JhdGUgPSA1ICsgMiAqIG5wLnNpbihucC5hcmFuZ2UobGVuKGRhdGVzKSkgKiAyICogbnAucGkgLyAzNjUpICsgbnAucmFuZG9tLm5vcm1hbCgwLCAxLCBsZW4oZGF0ZXMpKQogICAgICAgIHJlc3BvbnNlX3RpbWUgPSAyLjUgLSAwLjUgKiBucC5zaW4obnAuYXJhbmdlKGxlbihkYXRlcykpICogMiAqIG5wLnBpIC8gMzY1KSArIG5wLnJhbmRvbS5ub3JtYWwoMCwgMC4yLCBsZW4oZGF0ZXMpKQogICAgICAgIAogICAgICAgIHJldHVybiBwZC5EYXRhRnJhbWUoewogICAgICAgICAgICAnZGF0ZSc6IGRhdGVzLAogICAgICAgICAgICAnZnJhdWRfZGV0ZWN0aW9uX3JhdGUnOiBmcmF1ZF9kZXRlY3Rpb25fcmF0ZSwKICAgICAgICAgICAgJ2ZhbHNlX3Bvc2l0aXZlX3JhdGUnOiBmYWxzZV9wb3NpdGl2ZV9yYXRlLAogICAgICAgICAgICAncmVzcG9uc2VfdGltZSc6IHJlc3BvbnNlX3RpbWUKICAgICAgICB9KQogICAgCiAgICBkZWYgY3JlYXRlX3BlcmZvcm1hbmNlX2Rhc2hib2FyZChzZWxmLCBkYXRhKToKICAgICAgICAiIiJDcmVhdGUgYW4gaW50ZXJhY3RpdmUgcGVyZm9ybWFuY2UgZGFzaGJvYXJkIiIiCiAgICAgICAgZmlnID0gbWFrZV9zdWJwbG90cygKICAgICAgICAgICAgcm93cz0yLCBjb2xzPTIsIAogICAgICAgICAgICBzdWJ0aXRsZV90aXRsZXM9KCdGcmF1ZCBEZXRlY3Rpb24gUmF0ZSAoJSknLCAnRmFsc2UgUG9zaXRpdmUgUmF0ZSAoJSknLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSZXNwb25zZSBUaW1lIChzZWNvbmRzKScsICdNb250aGx5IFN1bW1hcnknKSwKICAgICAgICAgICAgc3BlY3M9W1t7InNlY29uZGFyeV95IjogRmFsc2V9LCB7InNlY29uZGFyeV95IjogRmFsc2V9XSwKICAgICAgICAgICAgICAgICAgIFt7InNlY29uZGFyeV95IjogRmFsc2V9LCB7InR5cGUiOiAiYmFyIn1dXQogICAgICAgICkKICAgICAgICAKICAgICAgICAjIEZyYXVkIERldGVjdGlvbiBSYXRlCiAgICAgICAgZmlnLmFkZF90cmFjZSgKICAgICAgICAgICAgZ28uU2NhdHRlcih4PWRhdGFbJ2RhdGUnXSwgeT1kYXRhWydmcmF1ZF9kZXRlY3Rpb25fcmF0ZSddLAogICAgICAgICAgICAgICAgICAgICAgIG1vZGU9J2xpbmVzJywgbmFtZT0nRnJhdWQgRGV0ZWN0aW9uIFJhdGUnLAogICAgICAgICAgICAgICAgICAgICAgIGxpbmU9ZGljdChjb2xvcj0nIzFGNzdCNCcsIHdpZHRoPTIpKSwKICAgICAgICAgICAgcm93PTEsIGNvbD0xCiAgICAgICAgKQogICAgICAgIAogICAgICAgICMgRmFsc2UgUG9zaXRpdmUgUmF0ZQogICAgICAgIGZpZy5hZGRfdHJhY2UoCiAgICAgICAgICAgIGdvLlNjYXR0ZXIoeD1kYXRhWydkYXRlJ10sIHk9ZGF0YVsnZmFsc2VfcG9zaXRpdmVfcmF0ZSddLAogICAgICAgICAgICAgICAgICAgICAgIG1vZGU9J2xpbmVzJywgbmFtZT0nRmFsc2UgUG9zaXRpdmUgUmF0ZScsAogICAgICAgICAgICAgICAgICAgICAgIGxpbmU9ZGljdChjb2xvcj0nI0ZGNzk3RCcsIHdpZHRoPTIpKSwKICAgICAgICAgICAgcm93PTEsIGNvbD0yCiAgICAgICAgKQogICAgICAgIAogICAgICAgICMgUmVzcG9uc2UgVGltZQogICAgICAgIGZpZy5hZGRfdHJhY2UoCiAgICAgICAgICAgIGdvLlNjYXR0ZXIoeD1kYXRhWydkYXRlJ10sIHk9ZGF0YVsncmVzcG9uc2VfdGltZSddLAogICAgICAgICAgICAgICAgICAgICAgIG1vZGU9J2xpbmVzJywgbmFtZT0nUmVzcG9uc2UgVGltZScsAogICAgICAgICAgICAgICAgICAgICAgIGxpbmU9ZGljdChjb2xvcj0nIzJDQTAyQycsIHdpZHRoPTIpKSwKICAgICAgICAgICAgcm93PTIsIGNvbD0xCiAgICAgICAgKQogICAgICAgIAogICAgICAgICMgTW9udGhseSBTdW1tYXJ5CiAgICAgICAgbW9udGhseV9kYXRhID0gZGF0YS5ncm91cGJ5KGRhdGFbJ2RhdGUnXS5kdC50b19wZXJpb2QoJ00nKSkuYWdnKHsKICAgICAgICAgICAgJ2ZyYXVkX2RldGVjdGlvbl9yYXRlJzogJ21lYW4nLAogICAgICAgICAgICAnZmFsc2VfcG9zaXRpdmVfcmF0ZSc6ICdtZWFuJywKICAgICAgICAgICAgJ3Jlc3BvbnNlX3RpbWUnOiAnbWVhbicKICAgICAgICB9KQogICAgICAgIAogICAgICAgIGZpZy5hZGRfdHJhY2UoCiAgICAgICAgICAgIGdvLkJhcih4PW1vbnRobHlfZGF0YS5pbmRleC5hc3R5cGUoc3RyKSwgCiAgICAgICAgICAgICAgICAgICB5PW1vbnRobHlfZGF0YVsnZnJhdWRfZGV0ZWN0aW9uX3JhdGUnXSwKICAgICAgICAgICAgICAgICAgIG5hbWU9J0F2ZyBGcmF1ZCBEZXRlY3Rpb24gUmF0ZScsAiAgICAgICAgICAgICAgICAgICBtYXJrZXI9ZGljdChjb2xvcj0nIzk0NjdCRCcpKSwKICAgICAgICAgICAgcm93PTIsIGNvbD0yCiAgICAgICAgKQogICAgICAgIAogICAgICAgIGZpZy51cGRhdGVfbGF5b3V0KAogICAgICAgICAgICB0aXRsZT0nU21hcnQgQnVkZ2V0IEFJIEN5YmVyU2VjIC0gUGVyZm9ybWFuY2UgRGFzaGJvYXJkJywKICAgICAgICAgICAgaGVpZ2h0PTgwMCwKICAgICAgICAgICAgc2hvd2xlZ2VuZD1GYWxzZQogICAgICAgICkKICAgICAgICAKICAgICAgICByZXR1cm4gZmlnCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgcGxvdHRlciA9IFNtYXJ0QnVkZ2V0UGxvdHMoKQogICAgZGF0YSA9IHBsb3R0ZXIuZ2VuZXJhdGVfcGVyZm9ybWFuY2VfZGF0YSgpCiAgICBmaWcgPSBwbG90dGVyLmNyZWF0ZV9wZXJmb3JtYW5jZV9kYXNoYm9hcmQoZGF0YSkKICAgIGZpZy53cml0ZV9odG1sKCJzbWFydF9idWRnZXRfcGVyZm9ybWFuY2UuaHRtbCIpCiAgICBwcmludCgiUGVyZm9ybWFuY2UgZGFzaGJvYXJkIGNyZWF0ZWQgc3VjY2Vzc2Z1bGx5ISIp